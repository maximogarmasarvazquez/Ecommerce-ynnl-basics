generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(client)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relaciones
  orders Order[]
  cart   Cart?
}

enum Role {
  client
  admin
}

model Category {
  id         String    @id @default(uuid())
  name       String    @unique
  products   Product[] // Relación inversa con Product

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  price       Float
  image       String
  weight      Float          // ← NUEVO: Peso en kg
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt

  category    Category?      @relation(fields: [category_id], references: [id])
  category_id String?

  // Relaciones
  sizes       ProductSize[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model ProductSize {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String
  size       String
  stock      Int
}

model Cart {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String     @unique
  items      CartItem[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model CartItem {
  id         String   @id @default(uuid())
  cart       Cart     @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  cart_id    String
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  size       String
  quantity   Int
}

model Shipping {
  id             String   @id @default(uuid())
  name           String
  base_price     Float     // precio base
  price_per_kilo Float     // adicional por kg
  estimated_days Int       // entrega estimada en días

  orders         Order[]
}

model Order {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  total        Float

  shipping     Shipping   @relation(fields: [shipping_id], references: [id])
  shipping_id  String     // ← NUEVO: Relación con método de envío

  items        OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id   String
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  size       String
  quantity   Int
  price      Float     // Precio del producto al momento de la compra
}
